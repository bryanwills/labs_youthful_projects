
Let's say I want to be able to parse an arbitrary expression like
f(f( a+f(a * b * f(c))))
where a, b,c are variables, and f is some function. I want to make a parse tree, and possibly to transform the tree.
Last night I thought of a very unorthodox way to do this.

I've heard of yacc/lex, pyparsing, and Python's ast. However, for what I have in mind this is all I need:
- Python supports overloading operators.
- Python has an "eval" for dynamically running code.

My idea is to create Python objects for f, a, b,c, and then *eval* the expression as if it were Python code. The objects I create will have their operators overloaded so that a+b, for example, returns an expression like ['+', a, b].
Here's an example that supports addition, multiplication, and functions taking any number of arguments. (Adding the rest of the operators is simple).

