[main_audiotime]
p1=0
p2=0
p3=0
p4=0
paramRange=1
programVersion=0.0.1
paramExpression0=$@static int fillar(double[] ar, int current, int end, double constant)$@{$@	for(int i=current; i<=end; i++) ar[i]=constant;$@	return end;$@}$@static int fillar(double[] ar, int current, int end, FN1 fn, double x1, double x2)$@{$@	double scale = (x2-x1)/((double)1+end-current);$@	for(int i=current; i<=end; i++) ar[i]=fn(scale*(i-current)+x1);$@	return end+1;$@}$@$@class NSine : CsWaveAudio.SynthBases.PeriodicSynthesisBase$@{$@	double[] ar;$@	//example of basic sine$@	public NSine(double freq, double amplitude) : base(freq, amplitude) {$@		int nperiod=(int) period;$@		ar=new double[(nperiod+1)]; $@		int c=0;$@		c=fillar(ar,c,c+nperiod/4,Math.Sin,0,Math.PI/2);$@		c=fillar(ar,c,c+nperiod/4,Math.Sin,Math.PI/2,Math.PI);$@		c=fillar(ar,c,c+nperiod/4,Math.Sin,Math.PI,Math.PI*1.5);$@		c=fillar(ar,c,c+nperiod/4,Math.Sin,Math.PI*1.5,Math.PI*2);$@	}$@	protected override double WaveformFunction(int i)$@	{$@		if (i>=period) throw new Exception("Beyond range");$@		return ar[i];$@	}$@}$@ $@//$$Main$@WaveAudio input = new NSine(240,.75).CreateWaveAudio(1.0);$@result=input;$@//$$EndMain$@$@
paramExpression1=
paramExpression2=
paramExpression3=
paramExpression4=
