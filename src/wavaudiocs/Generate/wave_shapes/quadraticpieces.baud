baud
_!@@!_
0.1
_!@@!_

static void fillar(double[] ar, ref int i, ref double curpos, double start, double end, double inc, double constant)
{
	while(curpos>=start && curpos<end)
	{
		ar[i] = constant;
		i++;
		curpos += inc; if (curpos>1.0) curpos-=1.0;
	}
}
static void fillar(double[] ar, ref int i, ref double curpos, double start, double end, double inc, FN1 fn, double x1, double x2)
{
	//0 should map to f(0)
	//n-1 should map to f(n-1)
	double scale = (x2-x1)/(end-start);
	
	while(curpos>=start && curpos<end)
	{
		ar[i] = fn(scale*(curpos-start)+x1);
		i++;
		curpos += inc; if (curpos>1.0) curpos-=1.0;
	}
}

class NQuadratic : CsWaveAudio.SynthBases.HighPeriodicSynthesisBase
{
	protected double smoothness;
	protected double pwidth;
	//example of basic sine
	public NQuadratic(double freq, double amplitude, double pwidth, double smoothness) : base(freq, amplitude) 
	{
		this.smoothness=smoothness;
		this.pwidth=pwidth;
	}
	protected override void WaveformFunction(double [] ar)
	{
		double peak=smoothness;
		double quartersection = ((period - period * Math.Abs(pwidth)) / 4.0);
		double flatsection = period - (quartersection*4);
		FN1 quadup=delegate(double x) {return peak*x*x- peak;};
		FN1 quaddn=delegate(double x) {return peak - peak*x*x;};
		
		
		int i=0;
		double curpos=0.0;
		double inc = this.timeScaleOne;
		while (i<ar.Length-400)
		{
			if (pwidth>0) {
				fillar(ar, ref i,ref curpos,0.0,quartersection,inc,quaddn,-1,0);
				fillar(ar, ref i,ref curpos,quartersection,quartersection+flatsection,inc,peak);
				fillar(ar, ref i,ref curpos,quartersection+flatsection,2*quartersection+flatsection,inc,quaddn,0,1);
				fillar(ar, ref i,ref curpos,2*quartersection+flatsection,4*quartersection+flatsection,inc,quadup,-1,1);
			} else {
				fillar(ar, ref i,ref curpos,0.0,quartersection*2,inc,quaddn,-1,1);
				fillar(ar, ref i,ref curpos,quartersection*2,quartersection*3,inc,quadup,-1,0);
				fillar(ar, ref i,ref curpos,quartersection*3,quartersection*3+flatsection,inc,-peak);
				fillar(ar, ref i,ref curpos,quartersection*3+flatsection,4*quartersection+flatsection,inc,quadup,0,1);
				
			}			
		}
		
		//trunc to -1/1
		for (int j=0; j<ar.Length;j++) if (ar[j]>1.0) ar[j]=1.0; 
			else if (ar[j]<-1.0) ar[j]=-1.0;
	}
}
 
//$$Main
WaveAudio input = new NQuadratic(240,.75, 0.4, 1.1).CreateWaveAudio(1.0);
result=input;
//$$EndMain


_!@@!_
1
_!@@!_
0
_!@@!_
0
_!@@!_
0
_!@@!_
0
_!@@!_
